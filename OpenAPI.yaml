openapi: 3.0.3

info:
  title: Koalitz API
  description: |-
    This is CRUD API documentation for future area project.
    You can get more info about that project [here](https://github.com/koalitz)
  contact:
    email: matvey-sizov@mail.ru
  version: 1.0.0

externalDocs:
  description: Source code
  url: https://github.com/koalitz/backend

servers:
  - url: http://localhost:3000/api
    description: Backend local instance

tags:
  - name: Auth
    description: Authenticate queries for user
  - name: Email
    description: Send messages from application smtp email
  - name: File
    description: Server files interaction
  - name: Post
    description: Posts interaction

paths:
  /auth/session:
    get:
      tags: [ Auth ]
      summary: Returns authorized user session data
      description: Returns user session data from cookie session
      security:
        - cookieAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SessionGetSuccess'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/DatabaseError'

    delete:
      tags: [ Auth ]
      security:
        - cookieAuth: []
      summary: Log out
      description: Deletes user session and clear user session cookie
      responses:
        '200':
          description: Session deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/DatabaseError'

  /email/send-code:
    post:
      tags: [ Email ]
      summary: Send secret authorization code to specified email
      description: Generates 5-digit string, saves it and sends it to specified email
      requestBody:
        $ref: "#/components/requestBodies/EmailSendCodePost"
      responses:
        '200':
          description: Mail was successfully sent
        '422':
          $ref: "#/components/responses/InvalidValidation"
        '500':
          $ref: '#/components/responses/SendCodeError'

  /auth/email:
    post:
      tags: [ Auth ]
      summary: Authorization via email
      description: Authorize user with code that previously was sent to email
      requestBody:
        $ref: "#/components/requestBodies/AuthEmailPost"
      responses:
        '200':
          $ref: "#/components/responses/AuthSuccess"
        '400':
          $ref: "#/components/responses/AuthByEmailFailed"
        '422':
          $ref: "#/components/responses/InvalidValidation"
        '500':
          $ref: '#/components/responses/DatabaseError'

  /file/*filepath:
    get:
      tags: [ File ]
      summary: Get server file
      description: Open any server file by its name and extension
      parameters:
        - $ref: '#/components/parameters/FileName'
      responses:
        '200':
          $ref: '#/components/responses/FileGetSuccess'
        '404':
          description: File not found

  /files/:limit:
    get:
      tags: [ File ]
      summary: Get any numbers of server file names
      description: Shows name and extension for limited number of files
      parameters:
        - in: path
          description: While limit is 0 - all files will be shown
          name: limit
          schema:
            type: integer
            example: 9
      responses:
        '200':
          $ref: '#/components/responses/FilesGetSuccess'
        '404':
          description: File not found

  /post/:id:
    get:
      tags: [ Post ]
      summary: Get post by id
      description: Returns one post with given id, if exists
      parameters:
        - in: path
          description: ID of the post
          name: id
          schema:
            type: integer
            example: 5
      responses:
        '200':
          $ref: '#/components/responses/PostGetSuccess'
        '400':
          $ref: '#/components/responses/PostNotFound'
        '500':
          $ref: '#/components/responses/DatabaseError'

  /post:
    post:
      tags: [ Post ]
      summary: Submit the post
      description: Upload all info about post and save it
      requestBody:
        $ref: "#/components/requestBodies/PostInfo"
      responses:
        '200':
          $ref: "#/components/responses/PostGetSuccess"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '413':
          $ref: '#/components/responses/TooLarge'
        '415':
          $ref: '#/components/responses/Unsupported'
        '422':
          $ref: "#/components/responses/InvalidValidation"
        '500':
          $ref: '#/components/responses/DatabaseError'

  /post/:title:
    get:
      tags: [ Post ]
      summary: Get posts by title
      description: Returns any number of posts which contains given title
      parameters:
        - in: path
          description: String, that any post MUST contain
          name: title
          schema:
            type: string
            example: ОАО
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/responses/PostGetSuccess'
        '400':
          $ref: '#/components/responses/PostNotFound'
        '500':
          $ref: '#/components/responses/DatabaseError'

components:
  schemas:

    Email:
      type: string
      format: email
      example: example@example.com

    Title:
      type: string
      example: ОАО больше

    Code:
      writeOnly: true
      type: string
      minLength: 5
      maxLength: 5
      example: QUERY

    Image:
      type: string
      format: binary
      example: binary data

    Role:
      enum:
        - user
        - organizer
        - admin
      type: string
      example: user

    FirstName:
      type: string
      example: Bomb
      minLength: 3
      maxLength: 32

    LastName:
      type: string
      example: Hodovaniuk
      minLength: 3
      maxLength: 32

    ImageName:
      type: string
      minLength: 20
      example: qwertyuioppoiuytrewq.png
      pattern: ^([a-z]+?)(\.[^.]*)$

    CreateTime:
      type: string
      readOnly: true
      format: date-time
      example: 2023-06-10T15:06:14.491386+03:00

    Summary:
      type: string
      example: Всё обо мне

    Place:
      type: string
      example: г. Липецк

    Sessions:
      type: array
      readOnly: true
      items:
        type: string
        uniqueItems: true
        format: uuid
        example: [
          "16688d51-0752-4e29-864c-e9decdb4edbb",
          "dcbb2492-6dfa-4b29-9c06-06ba4ad0a686"
        ]

    Post:
      type: object
      readOnly: true
      required:
        - title
        - summary
      properties:
        title:
          $ref: '#/components/schemas/Title'
        summary:
          $ref: '#/components/schemas/Summary'
        place:
          $ref: '#/components/schemas/Place'
        image:
          $ref: '#/components/schemas/ImageName'


    Me:
      type: object
      readOnly: true
      required:
        - role
        - createTime
        - email
        - firstName
        - lastName
      properties:
        email:
          $ref: "#/components/schemas/Email"
        role:
          $ref: "#/components/schemas/Role"
        firstName:
          $ref: "#/components/schemas/FirstName"
        lastName:
          $ref: "#/components/schemas/LastName"
        createTime:
          $ref: '#/components/schemas/CreateTime'

    Error:
      type: object
      readOnly: true
      properties:
        description:
          type: string
          example: You are not logged in

    ValidationError:
      type: object
      readOnly: true
      properties:
        fields:
          type: object
          uniqueItems: true
          additionalProperties:
            type: string
          example:
            email: email is not the correct email
            code: code must have a length of 5

  requestBodies:

    AuthEmailPost:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - code
            properties:
              email:
                $ref: "#/components/schemas/Email"
              code:
                $ref: "#/components/schemas/Code"
    
    EmailSendCodePost:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email: 
                $ref: "#/components/schemas/Email"

    PostInfo:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - title
              - summary
            properties:
              title:
                minLength: 3
                maxLength: 70
              place:
                maxLength: 100
              summary:
                maxLength: 1024
              image:
                $ref: '#/components/schemas/Image'

  parameters:

    FileName:
      in: path
      description: File name and his extension
      name: filepath
      schema:
        $ref: '#/components/schemas/ImageName'

  responses:

    SessionGetSuccess:
      description: User's info by session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Me'

    PostGetSuccess:
      description: Post's info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unsupported:
      description: Bad image extension
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    TooLarge:
      description: File is too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


    PostNotFound:
      description: Post not found in db
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    AuthSuccess:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Me'

    FileGetSuccess:
      description: File was successfully got
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/Image"

    FilesGetSuccess:
      description: Files was successfully got
      content:
        multipart/form-data:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ImageName"
      headers:
        Set-Cookie:
          schema:
            type: string
            example: session_id=f82f97fd-9930-4133-a6a7-1bccb3b933b4; Path=/api; Domain=localhost; SameSite=None; Secure; HttpOnly;

    Unauthorized:
      description: User must be authorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InvalidValidation:
      description: Data entered incorrectly
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    AuthByEmailFailed:
      description: Invalid email code
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    DatabaseError:
      description: Database connection lost
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    SendCodeError:
      description: Can't submit data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id
